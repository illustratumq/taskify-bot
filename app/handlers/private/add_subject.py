from aiogram import Dispatcher, Bot
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message

from app.database.services.repos import SubjectRepo, TaskRepo
from app.handlers.private.my_subjects import view_subjects_cmd
from app.keyboards.inline.back import back_kb
from app.keyboards.inline.menu import menu_cb
from app.keyboards.inline.settings import confirm_moderate_kb
from app.states.states import AddSubjectSG

cancel_kb = back_kb('‚óÄ –í—ñ–¥–º—ñ–Ω–∏—Ç–∏')


async def add_subject_cmd(call: CallbackQuery, callback_data: dict, state: FSMContext):
    text = (
        'üìö [–î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç]\n\n'
        '<b>1)</b> –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤—É –ø—Ä–µ–¥–º–µ—Ç—É, —è–∫–∏–π –±–∞–∂–∞—î—à –¥–æ–¥–∞—Ç–∏ üëá'
    )
    msg = await call.message.edit_text(text, reply_markup=cancel_kb)
    await state.update_data(last_msg_id=msg.message_id)
    await AddSubjectSG.Name.set()


async def save_subject_name(msg: Message, state: FSMContext):
    subject_name = msg.text
    if len(subject_name) > 255:
        error_text = (
            '–£–ø—Å, –Ω–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç—É –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∞, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫-—Ç—å —Å–∏–º–≤–æ–ª—ñ–≤ 255, '
            f'–∑–∞–º—ñ—Å—Ç—å {len(subject_name)}, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.'
        )
        await msg.answer(error_text)
        return
    await delete_previous_message(msg, state)
    text = (
        'üìö [–î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç]\n\n'
        f'<b>–ù–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç—É:</b> {subject_name}\n\n'
        f'<b>2)</b> –ù–∞–ø–∏—à–∏ –æ–ø–∏—Å, –¥–æ —Ü—å–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç—É üëá'
    )
    msg = await msg.answer(text, reply_markup=cancel_kb)
    await state.update_data(name=subject_name, last_msg_id=msg.message_id)
    await AddSubjectSG.Description.set()


async def save_subject_description(msg: Message, state: FSMContext):
    subject_description = msg.text
    if len(subject_description) > 500:
        error_text = (
            '–£–ø—Å, –æ–ø–∏—Å –ø—Ä–µ–¥–º–µ—Ç—É –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫-—Ç—å —Å–∏–º–≤–æ–ª—ñ–≤ 500, '
            f'–∑–∞–º—ñ—Å—Ç—å {len(subject_description)}, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.'
        )
        await msg.answer(error_text)
        return
    await delete_previous_message(msg, state)
    data = await state.get_data()
    text = (
        'üìö [–î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç]\n\n'
        f'<b>–ù–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç—É:</b> {data["name"]}\n'
        f'<b>–û–ø–∏—Å –ø—Ä–µ–¥–º–µ—Ç—É:</b> {subject_description}\n\n'
        f'<b>3)</b> –ù–∞–ø–∏—à–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –±–∞–ª —è–∫–∏–º –±—É–¥–µ –æ—Ü—ñ–Ω—é–≤–∞—Ç–∏—Å—å —Ü–µ–π –ø—Ä–µ–¥–º–µ—Ç (–≤—ñ–¥ 1 –¥–æ 100) üëá'
    )
    msg = await msg.answer(text, reply_markup=cancel_kb)
    await state.update_data(description=subject_description, last_msg_id=msg.message_id)
    await AddSubjectSG.Grade.set()


async def save_subject_grade(msg: Message, state: FSMContext):
    subject_grade: str = msg.text
    if not subject_grade.isnumeric():
        error_text = (
            '–£–ø—Å, –∑–¥–∞—î—Ç—Å—è —Ü–µ –Ω–µ —á–∏—Å–ª–æ, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.'
        )
        await msg.answer(error_text)
        return
    elif int(subject_grade) > 100:
        error_text = (
            '–£–ø—Å, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –±–∞–ª –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 100, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.'
        )
        await msg.answer(error_text)
        return
    await delete_previous_message(msg, state)
    data = await state.get_data()
    text = (
        'üìö [–î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç]\n\n'
        f'<b>–ù–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç—É:</b> {data["name"]}\n'
        f'<b>–û–ø–∏—Å –ø—Ä–µ–¥–º–µ—Ç—É:</b> {data["description"]}\n'
        f'<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞:</b> {subject_grade}\n\n'
        f'<b>4)</b> –ù–∞–ø–∏—à–∏ —Ç–µ–≥ –¥–ª—è —Ü—å–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç—É. –î–µ–∫—ñ–ª—å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –º–æ–∂—É—Ç—å –º–∞—Ç–∏ '
        f'—Å–ø—ñ–ª—å–Ω–∏–π —Ç–µ–≥, –∑–∞ —è–∫–∏–º —ó—Ö –º–æ–∂–Ω–∞ –±—É–¥–µ –≤—ñ–¥—Å–æ—Ä—Ç–æ—Ä—É–≤–∞—Ç–∏ üëá'
    )
    msg = await msg.answer(text, reply_markup=cancel_kb)
    await state.update_data(grade=int(subject_grade), last_msg_id=msg.message_id)
    await AddSubjectSG.Tag.set()


async def save_subject_tag(msg: Message, state: FSMContext):
    subject_tag = msg.text
    if len(subject_tag) > 100:
        error_text = (
            '–£–ø—Å, –∑–¥–∞—î—Ç—Å—è —Ü–µ–π —Ç–µ–≥ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.'
        )
        await msg.answer(error_text)
        return
    await state.update_data(tag=subject_tag)
    data = await state.get_data()
    await delete_previous_message(msg, state)
    text = (
        f'üìö [–î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç]\n\n'
        f'–£—Ä–∞, –º–∞–π–∂–µ –≤—Å–µ –≥–æ—Ç–æ–≤–æ, –±—É–¥—å-–ª–∞—Å–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä —á–∏ –≤—Å–µ –≤—ñ—Ä–Ω–æ\n\n'
        f'<b>–ü—Ä–µ–¥–º–µ—Ç</b>: {data["name"]}\n'
        f'<b>–û–ø–∏—Å –ø—Ä–µ–¥–º–µ—Ç—É:</b> {data["description"]}\n'
        f'<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –±–∞–ª:</b> {data["grade"]}\n\n'
        f'#{data["tag"]}\n\n'
        f'–Ø–∫—â–æ –≤—Å–µ –æ–∫–µ–π, –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è üëá'
    )
    msg = await msg.answer(text, reply_markup=confirm_moderate_kb('add_subject'))
    await AddSubjectSG.Confirm.set()


async def create_subject_cmd(call: CallbackQuery, state: FSMContext, subject_db: SubjectRepo, task_db: TaskRepo):
    data = await state.get_data()
    tag = data['tag']
    name = data['name']
    grade = data['grade']
    description = data['description']
    subject = await subject_db.add(
        name=name, description=description, grade=grade, tag=tag, user_id=call.from_user.id)
    callback_data = dict(subject_id=subject.subject_id)
    await view_subjects_cmd(call, callback_data, subject_db, task_db)


def setup(dp: Dispatcher):
    dp.register_callback_query_handler(add_subject_cmd, menu_cb.filter(action='add_subject'), state='*')
    dp.register_message_handler(save_subject_name, state=AddSubjectSG.Name)
    dp.register_message_handler(save_subject_description, state=AddSubjectSG.Description)
    dp.register_message_handler(save_subject_grade, state=AddSubjectSG.Grade)
    dp.register_message_handler(save_subject_tag, state=AddSubjectSG.Tag)
    dp.register_callback_query_handler(create_subject_cmd, menu_cb.filter(action='conf_add_subject'),
                                       state=AddSubjectSG.Confirm)


async def delete_previous_message(msg: Message, state: FSMContext, chat_id: int = None):
    try:
        data = await state.get_data()
        await msg.bot.delete_message(msg.from_user.id if not chat_id else chat_id, data['last_msg_id'])
    except:
        pass
